{"version":3,"file":"commonHelpers2.js","sources":["../src/js/task-1.js"],"sourcesContent":["/**\n * Напиши програмне забезпечення для ігрового автомата.\n * Для вирішення завдання використай готову розмітку HTML та базову стилізацію.\n *\n * Після натиснення на кнопку \"Start game\" в кожному віконці по черзі має з'являтись\n * смайлик з затримкою в 1 секунду ('🤑' або '👿')\n *\n * Під час обробки кожного віконця створи масив з Promis-ами\n * в якому кожен з них буде відповідати за своє віконце,\n * після чого оброби даний масив за допомогою методу Promise.allSettled\n *\n * Після того як всі віконця були заповнені потрібно\n * щоб скріпт автоматично визначав чи гравець переміг, чи ні.\n * Якщо в кожному віконці однаковий смайлик це означає що користувач переміг\n *\n * В поле result виводить повідомлення про статус гри ('Winner' або 'Loser')\n *\n * Після повторного натискання на кнопку \"Start game\"\n * поле має очищатись, а гра починатись з початку.\n */\n\nconst startBtn = document.querySelector('.start-btn');\nconst container = document.querySelector('.game-container');\nconst resultEl = document.querySelector('.game-result');\n\nfunction createPromise(delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const isActive = Math.random() > 0.5;\n      if (isActive) {\n        resolve ('🤑')\n      } else {\n        reject ('👿')\n      }\n    }, delay);\n  });\n  return promise;\n}\n\n\nstartBtn.addEventListener('click', onStartBtnClick);\n\nfunction onStartBtnClick() {\n  const promises = [];\n  const COUNT = 3;\n  for (let i = 0; i < COUNT; i++) {\n      container.children[i].textContent = '';\n      resultEl.textContent = '';\n    const promise = createPromise((i + 1) * 500);\n    promises.push(promise);\n\n    promise\n      .then(smile => {\n        container.children[i].textContent = smile;\n      })\n      .catch(smile => {\n        container.children[i].textContent = smile;\n      });\n  }\n\n  Promise.allSettled(promises).then(result => {\n    result = result.map(el => {\n      return el.reason || el.value;\n    });\n\n    const isWin = result.every(el => el === '🤑');\n\n    if (isWin) {\n      resultEl.textContent = '🤑Winner🤑';\n    } else {\n      resultEl.textContent = '👿Loser👿';\n    }\n  });\n}\n"],"names":["startBtn","container","resultEl","createPromise","delay","resolve","reject","onStartBtnClick","promises","i","promise","smile","result","el"],"mappings":"wFAqBA,MAAMA,EAAW,SAAS,cAAc,YAAY,EAC9CC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAW,SAAS,cAAc,cAAc,EAEtD,SAASC,EAAcC,EAAO,CAW5B,OAVgB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/C,WAAW,IAAM,CACE,KAAK,OAAM,EAAK,GAE/BD,EAAS,IAAI,EAEbC,EAAQ,IAAI,CAEf,EAAEF,CAAK,CACZ,CAAG,CAEH,CAGAJ,EAAS,iBAAiB,QAASO,CAAe,EAElD,SAASA,GAAkB,CACzB,MAAMC,EAAW,CAAA,EAEjB,QAASC,EAAI,EAAGA,EAAI,EAAOA,IAAK,CAC5BR,EAAU,SAASQ,CAAC,EAAE,YAAc,GACpCP,EAAS,YAAc,GACzB,MAAMQ,EAAUP,GAAeM,EAAI,GAAK,GAAG,EAC3CD,EAAS,KAAKE,CAAO,EAErBA,EACG,KAAKC,GAAS,CACbV,EAAU,SAASQ,CAAC,EAAE,YAAcE,CAC5C,CAAO,EACA,MAAMA,GAAS,CACdV,EAAU,SAASQ,CAAC,EAAE,YAAcE,CAC5C,CAAO,CACJ,CAED,QAAQ,WAAWH,CAAQ,EAAE,KAAKI,GAAU,CAC1CA,EAASA,EAAO,IAAIC,GACXA,EAAG,QAAUA,EAAG,KACxB,EAEaD,EAAO,MAAMC,GAAMA,IAAO,IAAI,EAG1CX,EAAS,YAAc,aAEvBA,EAAS,YAAc,WAE7B,CAAG,CACH"}